input{
	file{
		path => "D:/Dev/logstash-all-plugins-2.1.0/data/merge_gx_dboper.txt"
		sincedb_path => "D:/Dev/logstash-all-plugins-2.1.0/sincedb"
		start_position => "beginning"
		codec => multiline {
			pattern => "(tType\:\w+\:tValue\:\w+)|(变量类型\:\w+\:变量值\:\w+)|(Sql's bug is very big)|(\[ERROR\]\s传入的SQL没有WHERE条件)|(^[^\[])"
			what => previous
	    }
	}
}
filter {
	grok { 
		match => { 
			"message" => [ "^\[(?<tempTimestamp>[^\]]+)\][^\]]*\]\[(?<logLevel>\w+).*" ]
		}
		break_on_match => false
	}
	date {
		match => ["tempTimestamp","yyyy-MM-dd HH:mm:ss:SSS"]
		timezone => "Asia/Shanghai"
	}
	ruby {
		code => "if event['message'].include? ('[DEBUG] ExecSQL') 
					event['action'] = 'execSQL'
				 elsif event['message'].include? ('[ERROR] EXESQL的无条件查询')
				 	event['action'] = 'noConditionException' 
				 elsif event['message'].include? ('[ERROR] ### Error ExeSQL')
				 	event['action'] = 'errorExecSQL'
				 elsif event['message'].include? ('[DEBUG] bind variable')
				 	event['action'] = 'bindVariable'
				 elsif event['message'].include? ('[DEBUG] execUpdateSQL')
				 	event['action'] = 'execUpdateSQL'
				 elsif event['message'].include? ('[DEBUG] getResultCount')
				 	event['action'] = 'getResultCount'
				 elsif event['message'].include? ('[FATAL] Too many records')
				 	event['action'] = 'tooManyRecordsException'
				 end
				 "
	}
	ruby {
		code => "if event['action'] === 'execSQL' 
					event['sqlParameters'] = (event['message'].scan(/tValue:(?<value>\w+)/)).collect { |x| x[0] }
					event['sqlContent'] = /ExecSQL[^:]+:(?<sqlContent>[^\n\r]*)/.match(event['message'])['sqlContent'].strip
					case event['sqlContent']
					when /select/i
						event['sqlType'] = 'select'
					when /update/i
						event['sqlType'] = 'update'
					when /delete/i
						event['sqlType'] = 'delete'
					when /insert/i
						event['sqlType'] = 'insert'
					end
				 elsif event['action'] === 'noConditionException' 
				 	event['sqlContent'] = /没有WHERE条件(?<sqlContent>[^\n\r]*)/.match(event['message'])['sqlContent'].strip
				 	case event['sqlContent']
					when /select/i
						event['sqlType'] = 'select'
					when /update/i
						event['sqlType'] = 'update'
					when /delete/i
						event['sqlType'] = 'delete'
					when /insert/i
						event['sqlType'] = 'insert'
					end
				 elsif event['action'] === 'errorExecSQL'
				 	event['sqlContent'] = /### Error ExeSQL[^:]+:(?<sqlContent>[^\r\n]*)/.match(event['message'])['sqlContent'].strip
				 	case event['sqlContent']
					when /select/i
						event['sqlType'] = 'select'
					when /update/i
						event['sqlType'] = 'update'
					when /delete/i
						event['sqlType'] = 'delete'
					when /insert/i
						event['sqlType'] = 'insert'
					end
					event['sqlParameters'] = (event['message'].scan(/变量值:(?<value>\w+)/)).collect { |x| x[0] }
				 elsif event['action'] === 'bindVariable' 
				 	m = /bind variable type:(?<bindType>[^\s]+) value:(?<bindValue>[^\r\n]+)/.match(event['message'])
				 	event['bindType'] = m['bindType']
				 	event['bindValue'] = m['bindValue']
				 elsif event['action'] === 'execUpdateSQL'
				 	event['sqlContent'] = /execUpdateSQL[^:]*:(?<sqlContent>[^\r\n]*)/.match(event['message'])['sqlContent'].strip
				 	case event['sqlContent']
					when /select/i
						event['sqlType'] = 'select'
					when /update/i
						event['sqlType'] = 'update'
					when /delete/i
						event['sqlType'] = 'delete'
					when /insert/i
						event['sqlType'] = 'insert'
					end
					event['sqlParameters'] = (event['message'].scan(/tValue:(?<value>\w+)/)).collect { |x| x[0] }
				 elsif event['action'] === 'getResultCount'
				 	event['sqlContent'] = /getResultCount[^:]*:(?<sqlContent>[^\r\n]*)/.match(event['message'])['sqlContent'].strip
				 	case event['sqlContent']
					when /select/i
						event['sqlType'] = 'select'
					when /update/i
						event['sqlType'] = 'update'
					when /delete/i
						event['sqlType'] = 'delete'
					when /insert/i
						event['sqlType'] = 'insert'
					end
					event['sqlParameters'] = (event['message'].scan(/tValue:(?<value>\w+)/)).collect { |x| x[0] }
				 elsif event['action'] === 'tooManyRecordsException'
				 	event['sqlContent'] = /java.lang.Exception[^:]*:(?<sqlContent>[^\r\n]*)/.match(event['message'])['sqlContent'].strip
				 	case event['sqlContent']
					when /select/i
						event['sqlType'] = 'select'
					when /update/i
						event['sqlType'] = 'update'
					when /delete/i
						event['sqlType'] = 'delete'
					when /insert/i
						event['sqlType'] = 'insert'
					end
				 end
				 "
	}
	mutate {
		remove_field => [ "tempTimestamp" ]
		add_field => { "sourcetype" => "gxdboper" }
	}
}
output{
	elasticsearch {
        hosts => "localhost:9200" 
        #protocol => "http"
        index => "main"
        document_type => "gxdboper"
        #cluster => "xinghlCluster1"
    }
    stdout{
		codec => dots
	}
}