input{
	file{
		path => "D:/tools/logstash/logstash-1.5.0/bin/20160217/data/localhost-custom*"
		#path => "D:/tools/logstash/logstash-1.5.0/bin/20160217/data/test.log"
		sincedb_path => "D:/tools/logstash/logstash-1.5.0/bin/20160217/sincedb"
		start_position => "beginning"
	}
}
filter{
	ruby{
		code => "
		if event['message'].include? ('::1')
			event['http'] = /^(?:[^\/]+\/){3}(?<http>\d+\.\d+)/.match(event['message'])['http']
			event['statuscode'] = /^(?:[^ ]+ ){8}(?<statuscode>\d+)/.match(event['message'])['statuscode']
			event['time'] = /^(?:[^ ]+ ){3}\[(?<time>\w+\/\w+\/\w+:\w+:\w+:\w+ \+\w+)\]/.match(event['message'])['time']
		elsif /^(?:[^\"]+\"){1}(?<test>.*)(?:\"[^\"]+)/.match(event['message'])['test'] == '-'
			event['ip'] = /^(?<ip>\d+\.\d+\.\d+\.\d+)/.match(event['message'])['ip']
			event['statuscode'] = /^(?:[^\042]+\042){2} (?<statuscode>\d+)/.match(event['message'])['statuscode']	
			event['bytes'] = /^(?:[^\042]+\042){2} \d+[ ]+(?<bytes>\d+|\-)/.match(event['message'])['bytes']
			event['time'] = /^(?:[^ ]+ ){3}\[(?<time>\w+\/\w+\/\w+:\w+:\w+:\w+ \+\w+)\]/.match(event['message'])['time']
			if event['bytes'].include? ('-')
				event['bytes'] = '0'
			end
		elsif event['message'].include?('/?ub16e')
			event['ip'] = /^(?<ip>\d+\.\d+\.\d+\.\d+)/.match(event['message'])['ip']
			event['method'] = /^[^\"]+\"(?<method>[A-Za-z]+)/.match(event['message'])['method']
			event['resource'] = /^(?:[^ ]+ ){6}(?<resource>[^ ]+)/.match(event['message'])['resource']
			event['http'] = /^(?:[^ ]+ ){7}HTTP\/(?<http>\d+\.\d+)/.match(event['message'])['http']
			event['statuscode'] = /^(?:[^\042]+\042){3} (?<statuscode>\d+)/.match(event['message'])['statuscode']	
			event['bytes'] = /^(?:[^\042]+\042){3} \d+[ ]+(?<bytes>\d+|\-)/.match(event['message'])['bytes']
			event['time'] = /^(?:[^ ]+ ){3}\[(?<time>\w+\/\w+\/\w+:\w+:\w+:\w+ \+\w+)\]/.match(event['message'])['time']
			if event['bytes'].include? ('-')
				event['bytes'] = '0'
			end
			if event['resource'].include?('.js')
				event['filetype'] = 'js'
			elsif event['resource'].include?('.css')
				event['filetype'] = 'css'
			elsif event['resource'].include?('.png')
				event['filetype'] = 'png'
			elsif event['resource'].include?('.shtml')
				event['filetype'] = 'shtml'
			elsif event['resource'].include?('.swf')
				event['filetype'] = 'swf'
			elsif event['resource'].include?('.php')
				event['filetype'] = 'php'
			elsif event['resource'].include?('.gif')
				event['filetype'] = 'gif'
			elsif event['resource'].include?('.jpg')
				event['filetype'] = 'jpg'
			elsif event['resource'].include?('.asp')
				event['filetype'] = 'asp'
			else
				event['filetype'] = 'other'
			end
		else 
			event['ip'] = /^(?<ip>\d+\.\d+\.\d+\.\d+)/.match(event['message'])['ip']
			event['method'] = /^[^\"]+\"(?<method>[A-Za-z]+)/.match(event['message'])['method']
			event['resource'] = /^(?:[^ ]+ ){6}(?<resource>[^ ]+)/.match(event['message'])['resource']
			event['http'] = /^(?:[^ ]+ ){7}HTTP\/(?<http>\d+\.\d+)/.match(event['message'])['http']
			event['statuscode'] = /^(?:[^\042]+\042){2} (?<statuscode>\d+)/.match(event['message'])['statuscode']	
			event['bytes'] = /^(?:[^\042]+\042){2} \d+[ ]+(?<bytes>\d+|\-)/.match(event['message'])['bytes']
			event['time'] = /^(?:[^ ]+ ){3}\[(?<time>\w+\/\w+\/\w+:\w+:\w+:\w+ \+\w+)\]/.match(event['message'])['time']
			if event['bytes'].include? ('-')
				event['bytes'] = '0'
			end
			if event['resource'].include?('.js')
				event['filetype'] = 'js'
			elsif event['resource'].include?('.css')
				event['filetype'] = 'css'
			elsif event['resource'].include?('.png')
				event['filetype'] = 'png'
			elsif event['resource'].include?('.shtml')
				event['filetype'] = 'shtml'
			elsif event['resource'].include?('.swf')
				event['filetype'] = 'swf'
			elsif event['resource'].include?('.php')
				event['filetype'] = 'php'
			elsif event['resource'].include?('.gif')
				event['filetype'] = 'gif'
			elsif event['resource'].include?('.jpg')
				event['filetype'] = 'jpg'
			elsif event['resource'].include?('.asp')
				event['filetype'] = 'asp'
			else
				event['filetype'] = 'other'
			end
		end"
	}
	date {
		match => ["time","dd/MMM/yyyy:HH:mm:ss Z"]
		locale => "en-US"
		timezone => "Asia/Shanghai"
	}
	mutate {
		remove_field => [ "time" ]
		add_field => { "sourcetype" => "localhost-custom" }
	}
}
output{
	elasticsearch {
        host => "localhost"
  		cluster => "loginsight_cluster"
      	index => "main"
	    document_type  => "localhost-custom"
    }
    stdout{
		#codec => rubydebug
		codec => dots
	}
}

