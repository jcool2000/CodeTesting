input{
	file{
		path => "D:/Dev/logstash-all-plugins-2.1.0/data/merge_id_prd_log.txt"
		sincedb_path => "D:/Dev/logstash-all-plugins-2.1.0/sincedb"
		start_position => "beginning"
	}
}
filter{
	grok { 
		match => { 
			"message" => [ "^\[(?<tempTimestamp>[^\]]+)\][^\]]*\]\[(?<logLevel>\w+).*" ]
		}
		break_on_match => false
	}
	date {
		match => ["tempTimestamp","yyyy-MM-dd HH:mm:ss:SSS"]
		timezone => "Asia/Shanghai"
	}
	ruby{
		code => "event.cancel if event['message'].include?('[INFO] #####################')"
	}
	multiline {
		pattern => "(\[INFO\] ###########DocID)|(\[ERROR\]\s传入的SQL没有WHERE条件)|(变量类型\:\w+\:变量值\:\w+)|(\[INFO\] 退保原因)|(^[^\[])|(\[INFO\] 消耗时间毫秒)|(^[^\[])"
		what => previous
    }
    ruby{
   		code => "if event['message'].include? ('[INFO] ExecSQL : ') 
   					event['action'] = 'sqlExec'
   		         elsif event['message'].include? ('[INFO] mSql: ')
   		         	event['action'] = 'sqlM'
   		         elsif event['message'].include? ('[INFO] SQL : ')
					event['action'] = 'sql'
				 elsif event['message'].include? ('[INFO] select ')
				 	event['action'] = 'sqlSelect'
				 elsif event['message'].include? ('[INFO] == UPDATE ')
				 	event['action'] = 'sqlUpdate'
				 elsif event['message'].include? ('[ERROR] EXESQL的无条件查询')
				 	event['action'] = 'noConditionException' 
				 elsif event['message'].include? ('[ERROR] ### Error ExeSQL')
				 	event['action'] = 'errorExecSQL'
				 elsif event['message'].include? ('[INFO] CodeType')
				 	event['action'] = 'codeQuery'
				 elsif event['message'].include? ('[INFO] ###########DocID')
				 	event['action'] = 'easyScan'
				 elsif event['message'].include? ('[INFO] calCode')
				 	event['action'] = 'calCode'
				 elsif event['message'].include? ('[INFO] VTS Template')
				 	event['action'] = 'vtsTemplate'
				 elsif event['message'].include? ('[INFO] 成功完成')
				 	event['action'] = 'succeedReport'
				 elsif event['message'].include? ('[INFO] 退保原因')
				 	event['action'] = 'revokeReport'
				 elsif event['message'].include? ('[INFO] 消耗时间毫秒')
				 	event['action'] = 'monitorSql'
				 end
				 "
    }
    ruby {
		code => "if event['action'] === 'sqlExec' 
					event['sqlContent'] = /ExecSQL[^:]+:(?<sqlContent>[^\n\r]*)/.match(event['message'])['sqlContent'].strip
					case event['sqlContent']
					when /select/i
						event['sqlType'] = 'select'
					when /update/i
						event['sqlType'] = 'update'
					when /delete/i
						event['sqlType'] = 'delete'
					when /insert/i
						event['sqlType'] = 'insert'
					end
				 elsif event['action'] === 'sqlM' 
					event['sqlContent'] = /mSql:(?<sqlContent>[^\n\r]*)/.match(event['message'])['sqlContent'].strip
					case event['sqlContent']
					when /select/i
						event['sqlType'] = 'select'
					when /update/i
						event['sqlType'] = 'update'
					when /delete/i
						event['sqlType'] = 'delete'
					when /insert/i
						event['sqlType'] = 'insert'
					end
				 elsif event['action'] === 'SQL' 
					event['sqlContent'] = /SQL[^:]+:(?<sqlContent>[^\n\r]*)/.match(event['message'])['sqlContent'].strip
					case event['sqlContent']
					when /select/i
						event['sqlType'] = 'select'
					when /update/i
						event['sqlType'] = 'update'
					when /delete/i
						event['sqlType'] = 'delete'
					when /insert/i
						event['sqlType'] = 'insert'
					end
				 elsif event['action'] === 'sqlSelect' 
					event['sqlContent'] = /\[INFO\]\s+(?<sqlContent>[^\n\r]*)/.match(event['message'])['sqlContent'].strip
					case event['sqlContent']
					when /select/i
						event['sqlType'] = 'select'
					when /update/i
						event['sqlType'] = 'update'
					when /delete/i
						event['sqlType'] = 'delete'
					when /insert/i
						event['sqlType'] = 'insert'
					end
				 elsif event['action'] === 'sqlUpdate' 
					event['sqlContent'] = /==[^=]+==(?<sqlContent>[^\r\n]*+)/.match(event['message'])['sqlContent'].strip
					event['sqlType'] = 'update'
				 elsif event['action'] === 'noConditionException' 
				 	event['sqlContent'] = /没有WHERE条件(?<sqlContent>[^\n\r]*)/.match(event['message'])['sqlContent'].strip
				 	case event['sqlContent']
					when /select/i
						event['sqlType'] = 'select'
					when /update/i
						event['sqlType'] = 'update'
					when /delete/i
						event['sqlType'] = 'delete'
					when /insert/i
						event['sqlType'] = 'insert'
					end
				 elsif event['action'] === 'errorExecSQL'
				 	event['sqlContent'] = /### Error ExeSQL[^:]+:(?<sqlContent>[^\r\n]*)/.match(event['message'])['sqlContent'].strip
				 	case event['sqlContent']
					when /select/i
						event['sqlType'] = 'select'
					when /update/i
						event['sqlType'] = 'update'
					when /delete/i
						event['sqlType'] = 'delete'
					when /insert/i
						event['sqlType'] = 'insert'
					end
					event['sqlParameters'] = (event['message'].scan(/变量值:(?<value>\w+)/)).collect { |x| x[0] }
				 elsif event['action'] === 'codeQuery' 
				 	m = /CodeType\s+:(?<codeType>[^\n\r]*)/.match(event['message'])
				 	event['codeType'] = m['codeType']
				 elsif event['action'] === 'easyScan'
				 	m1 = /queryType#+=+(?<queryType>\w+)/.match(event['message'])
				 	event['queryType'] = m1.nil? ? nil:m1['queryType']
				 	m2 = /DocID#+=+(?<docId>\w+)/.match(event['message'])
				 	event['docId'] = m2.nil? ? nil:m2['docId']
				 elsif event['action'] === 'vtsTemplate'
				 	m3 = /VTS Template = (?<vtsTemplate>[^\r\n]*+)/.match(event['message'])
				 	event['vtsTemplate'] = m3['vtsTemplate']
				 elsif event['action'] === 'succeedReport'
				 	m4 = /成功完成(?<successItem>[^\r\n]*+)/.match(event['message'])
				 	event['successItem'] = m4['successItem']
				 elsif event['action'] === 'revokeReport'
				 	m5 = /申请方式：(?<manner>[^\r\n]*+)/.match(event['message'])
				 	event['manner'] = m5['manner']
				 	m6 = /退保原因代码：(?<reasonCode>[^\r\n]*+)/.match(event['message'])
				 	event['reasonCode'] = m6['reasonCode']
				 	m7 = /退保原因：(?<reason>[^\r\n]*+)/.match(event['message'])
				 	event['reason'] = m7['reason']
				 elsif event['action'] === 'monitorSql'
				 	m7 = /消耗时间毫秒:(?<milSec>[^\r\n]*+)/.match(event['message'])
				 	event['milSec'] = m7['milSec']
				 end
				 "
	}
	mutate {
		remove_field => [ "tempTimestamp" ]
		add_field => { "sourcetype" => "gxlisidprd" }
	}
}
output{
	elasticsearch {
        hosts => "localhost:9200" 
        #protocol => "http"
        index => "main"
        document_type => "gxlisidprd"
        #cluster => "xinghlCluster1"
    }
    stdout{
		codec => dots
	}
}